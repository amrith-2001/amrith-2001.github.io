<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[HTB]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>HTB</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sat, 23 Nov 2024 08:53:03 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 23 Nov 2024 08:53:03 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[Initial Access]]></title><description><![CDATA[ 
 <br><br><img alt="Pasted image 20241101122329.png" src="pasted-image-20241101122329.png"><br>
The preliminary Nmap scan revealed two ports: 22 and 5000. Leaving port 22 aside, port 5000 was an web application running on Werkzeug (Python). The web app is a CIF analyzer which gave me options to login and register.<br>
<img alt="Pasted image 20241101122526.png" src="pasted-image-20241101122526.png"><br>According to google, Crystallographic Information File (CIF) is a standard text file format for representing crystallographic information, promulgated by the International Union of Crystallography (IUCr). So the web app is something related to Chemistry(Duh!!)/biology.<br>
<img alt="Pasted image 20241101124049.png" src="pasted-image-20241101124049.png"><br>So, the next step was checking for any known vulnerabilities. I checked for the normal Werkzeug vulnerabilities, but it was most probably a rabbit hole and hence didn't proceed with it from the get go. However, there was a vulnerability in the processing of the CIF files by a particular Python package (CVE-2024-23346) [<a data-tooltip-position="top" aria-label="https://www.vicarius.io/vsociety/posts/critical-security-flaw-in-pymatgen-library-cve-2024-23346" rel="noopener nofollow" class="external-link" href="https://www.vicarius.io/vsociety/posts/critical-security-flaw-in-pymatgen-library-cve-2024-23346" target="_blank">Critical Security Flaw in Pymatgen Library (CVE-2024-23346) - vsociety</a>].<br>Since, only blind/out-of-band enumeration was possible, I went ahead and checked whether I could ping my machine from the server and it worked.<br>
<img alt="Pasted image 20241121093140.png" src="pasted-image-20241121093140.png"><br>
<img alt="Pasted image 20241121093204.png" src="pasted-image-20241121093204.png"><br>So, the next step was to get a reverse shell. However, the problem was in finding the right type of reverse payload, for which I needed some help. And Voilaaa!!<br>
<img alt="Pasted image 20241121132406.png" src="pasted-image-20241121132406.png"><br><img alt="Pasted image 20241121132450.png" src="pasted-image-20241121132450.png"><br>
<img alt="Pasted image 20241121132839.png" src="pasted-image-20241121132839.png"><br>However, for some reason, we are getting a shell only when we upload a file from the start. If we try to View an already uploaded malicious file, its not hitting back. Weird. Moreover, there is a weird cron job running thats deleting these files, and therefore hanging the reverse session as well or not, it may be just that the box is too slow.<br><br>So, the first thing is, we are the 'App' user and the other user in the box is Rosa, who we are supposed to gain access to, in order to get the user.txt flag. However, first, I am trying to shift to a much better access i.e. SSH.<br>
<img alt="Pasted image 20241121133620.png" src="pasted-image-20241121133620.png"><br>
<img alt="Pasted image 20241122012730.png" src="pasted-image-20241122012730.png"><br><img alt="Pasted image 20241122013508.png" src="pasted-image-20241122013508.png"><br>So, I started checking the web source code for any hardcoded creds and got once, however, that was pretty much useless. Then, I looked into the instance folder and found the Sqlite3 Db file, which I just had to read and get the creds for Rosa user, and Voilaa!!.<br>
<img alt="Pasted image 20241122013753.png" src="pasted-image-20241122013753.png"><br>So, once I got the user flag. I ran Linpeas, which initially led me down another rabbit hole and I tried for some time exploiting that PV vector. However, after that, I also noticed that there was a port open at 8080, which I forwarded via SSH. IT was a site monitoring web site.<br>
<img alt="Pasted image 20241122051250.png" src="pasted-image-20241122051250.png"><br>This was also running over Python, but on a aiohttp instance. So naturally since this is a internal app (most prob running as root), I checked whether aiohttp/3.9.1 contained any known vulnerabilities, and it did. A Path Traversal vulnerability.(CVE-2024-23334)<a data-href="GitHub - wizarddos/CVE-2024-23334: Proof-of-Concept for LFI/Path Traversal vulnerability in Aiohttp =< 3.9.1](https://github.com/wizarddos/CVE-2024-23334)" href="GitHub - wizarddos/CVE-2024-23334: Proof-of-Concept for LFI/Path Traversal vulnerability in Aiohttp =< 3.9.1](https://github.com/wizarddos/CVE-2024-23334)" class="internal-link" target="_self" rel="noopener nofollow">GitHub - wizarddos/CVE-2024-23334: Proof-of-Concept for LFI/Path Traversal vulnerability in Aiohttp =&lt; 3.9.1](https://github.com/wizarddos/CVE-2024-23334)</a><br><img alt="Pasted image 20241122052333.png" src="pasted-image-20241122052333.png"><br>
<img alt="Pasted image 20241122053125.png" src="pasted-image-20241122053125.png"><br>And pawned root as well!!]]></description><link>chemistry.html</link><guid isPermaLink="false">Chemistry.md</guid><pubDate>Fri, 22 Nov 2024 10:31:39 GMT</pubDate><enclosure url="pasted-image-20241101122329.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;pasted-image-20241101122329.png&quot;&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>